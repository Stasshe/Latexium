import { parseLatex, analyze } from '../dist/index.esm.js';

console.log('=== PARSER IMPROVEMENT TEST ===\n');

const parserTests = [
  // Èö†„Çå„Åü‰πóÁÆó„ÅÆ„ÉÜ„Çπ„Éà
  {
    expression: '2x',
    expected_parse: true,
    description: 'Implicit multiplication: number √ó variable'
  },
  {
    expression: 'xy',
    expected_parse: true, 
    description: 'Implicit multiplication: variable √ó variable'
  },
  {
    expression: '3\\sin(x)',
    expected_parse: true,
    description: 'Implicit multiplication: number √ó function'
  },
  {
    expression: 'x(y+1)',
    expected_parse: true,
    description: 'Implicit multiplication: variable √ó parentheses'
  },
  {
    expression: '2(x+1)',
    expected_parse: true,
    description: 'Implicit multiplication: number √ó parentheses'
  },
  // Èñ¢Êï∞ÊåáÊï∞Ë®òÊ≥ï„ÅÆ„ÉÜ„Çπ„Éà
  {
    expression: '\\sin^{2}(x)',
    expected_parse: true,
    description: 'Function exponentiation with braces'
  },
  {
    expression: '\\cos^2(x)',
    expected_parse: true,
    description: 'Function exponentiation without braces'
  },
  {
    expression: '\\sin^{-1}(x)',
    expected_parse: true,
    description: 'Function negative exponentiation'
  }
];

async function testParser(test, index) {
  console.log(`Test ${index + 1}: ${test.expression}`);
  console.log(`Description: ${test.description}`);
  
  try {
    const parseResult = parseLatex(test.expression);
    
    if (parseResult.error) {
      console.log(`‚ùå PARSE ERROR: ${parseResult.error}`);
      return { status: 'parse_error', error: parseResult.error };
    }
    
    console.log(`‚úÖ PARSE SUCCESS`);
    console.log(`   AST Type: ${parseResult.ast?.type}`);
    
    // Ë©ï‰æ°„ÇÇË©¶„Åó„Å¶„Åø„Çã
    const analyzeResult = analyze(parseResult.ast, {
      task: 'evaluate',
      variable: 'x'
    });
    
    if (analyzeResult.error) {
      console.log(`   Analysis: ${analyzeResult.error}`);
    } else {
      console.log(`   Result: ${analyzeResult.value}`);
      console.log(`   Type: ${analyzeResult.valueType}`);
    }
    
    return { status: 'success', ast: parseResult.ast };
    
  } catch (error) {
    console.log(`üí• ERROR: ${error.message}`);
    return { status: 'runtime_error', error: error.message };
  }
}

// „ÉÜ„Çπ„Éà„ÅÆÂÆüË°å
let passed = 0;
let failed = 0;

for (let i = 0; i < parserTests.length; i++) {
  const result = await testParser(parserTests[i], i);
  
  if (result.status === 'success') {
    passed++;
  } else {
    failed++;
  }
  
  console.log('');
}

console.log(`\n=== PARSER IMPROVEMENT SUMMARY ===`);
console.log(`‚úÖ Passed: ${passed}/${parserTests.length}`);
console.log(`‚ùå Failed: ${failed}/${parserTests.length}`);
console.log(`üìä Success Rate: ${((passed / parserTests.length) * 100).toFixed(1)}%`);

if (passed === parserTests.length) {
  console.log('\nüéâ ALL PARSER IMPROVEMENTS WORKING!');
} else if (passed / parserTests.length > 0.7) {
  console.log('\nüëç MOST PARSER IMPROVEMENTS WORKING');
} else {
  console.log('\n‚ö†Ô∏è  PARSER IMPROVEMENTS NEED MORE WORK');
}